{"meta":{"title":"Jerry船长","subtitle":null,"description":null,"author":"朱斌","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-03-02T01:13:08.000Z","updated":"2018-03-02T01:13:08.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"我问：我是一个怎么样的人？ 答：80后程序猿，南漂，跟大多数同龄人相比并没有那么出彩，平凡的人有着不平凡的坎坷人生。 问：最喜欢做的事？ 答：写写代码，看看产品、阅读各种书籍 问：追求点什么呢？ 答：玩转技术，分享人生、追求卓越、知行合一 现在目前在广州，主要从事Java领域相关工作，做过一些管理，搞过一些架构设计，懂一些产品，是一个爱折腾的骚年。 平时除了撸代码外，还有以下兴趣爱好： 喜欢观看各种体育赛事，目前是皇马球迷和勇士球迷 喜欢跑步健身，身体是革命的根本 喜欢阅读各种书籍，丰富思维 喜欢旅游，至今也还没去过特别屌炸天的地儿 最近关注分布式微服务的开发及架构设计落地，在工作不忙时，会经常更新博客，记录自己平时工作和生活的一些感悟，如果大家对博客中的内容有任何建议，欢迎与我联系。"},{"title":"分类","date":"2018-02-26T09:06:20.000Z","updated":"2018-02-26T09:06:20.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Project","date":"2018-02-24T10:40:23.000Z","updated":"2018-02-24T10:40:23.000Z","comments":true,"path":"project/index.html","permalink":"http://yoursite.com/project/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-02-26T09:06:59.000Z","updated":"2018-02-26T09:06:59.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"读《重新理解创业》有感","slug":"读《重新理解创业》有感","date":"2019-03-28T14:49:24.000Z","updated":"2019-03-28T14:52:34.000Z","comments":true,"path":"2019/03/28/读《重新理解创业》有感/","link":"","permalink":"http://yoursite.com/2019/03/28/读《重新理解创业》有感/","excerpt":"","text":"最近读完易到创始人周航写的重新理解创业,非常深刻剖析了易到为什么失败。讲述了作者从南到北的两段创业故事。从公司战略、竞争、品牌、流量、钱、领导力、领导者的自我成长、打造团队、企业成长、应对低谷、突破瓶颈、未来等多维度方面进行了重新理解分析。帮助许多创业者在这段旅程中学习失败经验。 公司战略创业中经常会听到“战略”这一个关键词，战略对任何公司来说，都是决定命令走向的关键问题，但是我们都知道，找到一个真正很好的战略是非常难的，为了找到正确正确，第一个问题需要弄清楚我们到底应该是概念先行，还是问题驱动。很多互联网创业者非常擅于炒概念。但是从解决问题的角度出发解决真实存在的需求，这样的出发点能非常好的帮助创业者明确创业中的关键问题。那既然我们的出发点是解决问题，那么我们知道如何去甄别需求。很多时候往往不要有太多执念。不要为了追赶概念而去创业，而应该考虑的是如何解决用户需求。 直面竞争我们都知道，企业在发展过程中，会来自内部及外部各种不同的竞争，竞争生死问题。直面竞争也是公司成长最好的方法。在压迫性的环境下，整个公司的成长会加速。最终竞争肯定要回归本质，到底我们的业务是技术驱动、产品驱动、运营驱动还是资源驱动、品牌驱动。 品牌流量中国在过去这么多年的发展历史中，品牌的概念非常深入人心。在我看来，要想有品牌，第一步还得回归原点，回归产品本身，保证产品现有质，我们不可能脱离产品谈品牌。同时在互联网这20年的发展。流量永远都是稀缺的。实际上当我们从产品的角度重新理解流量，关键还是产品特征决定了流量的价值 领导者的自我成长周航在讲述易到面对2015年网约车大战中。对他的打击非常大，整个易到团队已经完全没有战斗力。这一次的失败让他明白领导力不是有多少人听你的指令，也不是你能命令多少人，而是你对别人的“激发”有多大。 在获得领导力的过程中，总结以下3点： 勇敢的做自己 去搭建你真正喜欢的团队、因为你只能领导你喜欢的人 去做与你特质和领导力相匹配的事情 打造团队对于一家创业公司，除了找钱之外、最重要的任务就是找人。我们在公司初创时期，第一步要寻找与你志同道合的朋友合作，搭建公司核心的文化与价值观。第二步搭骨架寻找信任你的初创员工，第三步要学会要留住牛人。最后复盘是团队整合的核心方法，复盘最大的问题是，沟通时大家都不好意思去触碰真正核心问题。一个公司的发展，除了战略和资金。最重要的就是人。 企业成长创业公司的成长过程包含了很多复杂问题。我们在资源有限的情况下，不可能把所有事情都做圆满。因此在启动阶段，要把产品刻意往小了做，也就是“最小化启动”，有意识的把事情做小，而不是勉强做大。还有一个观点，即加速度比初速度更重要。举个例子，如果画一条成长曲线，一种是一开始的起点很高，也就是初速度很大，但它一直保持着平的或者很低的增幅。另外一种，一开始接近于零，初速度很小，但是加速度很快。当你天天在进步，天天都在成长，你很快就会超过一个起点很高的公司。最后，用未来的视角审视现在，你会为了未来那个时代思考今天该做些什么，提早为未来做好准备，用更积极、更用于探索的态度经营企业，这才是“基业长青”的方式。 面对低谷不要因为暂时的挫折和困难，就忘记了提高公司价值的根本使命。其次不要自我“催眠”，不要觉得自己做的事太伟大，也不要觉得做的事太多太难，就可以“慢”。最后，必须要有勇气选择最大的市场，而不是做一个所谓的“小而美”的产品偏安一隅。在互联网世界里，你必须进攻，进攻，再进攻。 写到最后错误和失败几乎是无法避免的，我们学习失败的真正目的在于，面对它，接受它，解决它，放下它。然后从中成长，让自己以后生活变得更好。","categories":[],"tags":[]},{"title":"Eureke集群高可用配置","slug":"Eureke集群高可用配置","date":"2018-03-29T08:09:57.000Z","updated":"2018-04-04T15:13:39.000Z","comments":true,"path":"2018/03/29/Eureke集群高可用配置/","link":"","permalink":"http://yoursite.com/2018/03/29/Eureke集群高可用配置/","excerpt":"","text":"最近在进行微服务治理落地时，选型了Eureka作为注册中心的组件，网上关于搭建Eureka高可用集群的资料太碎片化，很多都是复制粘贴而来，并没有完整的集群搭建过程，因此专门搭建了一个项目来看看Eureka集群到底该怎么玩 Server端配置1.创建Eureka Server项目,添加pom.xml配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!-- 依赖管理 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- spring boot 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.boot.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring版本依赖管理--&gt; &lt;dependency&gt; &lt;groupId&gt;io.spring.platform&lt;/groupId&gt; &lt;artifactId&gt;platform-bom&lt;/artifactId&gt; &lt;version&gt;Brussels-SR7&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- spring cloud依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- Eureka Server端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-netflix-eureka-server&lt;/artifactId&gt; &lt;/denpendency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.boot.version&#125;&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; 2.创建EurekaServerApplication类，添加@EnableEurekaServer注解 12345678@EnableEurekaServer@SpringBootApplicationpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServerApplication.class, args); &#125;&#125; 3.添加application.yml配置 12345678910111213141516171819202122232425262728293031spring: application: name: eurela-server-cluster#通过---来模拟多个节点的配置---spring: profiles: pee1server: port: 8761eureka: instance: name: pee1 client: server-url: defaultZone: http://pee2:8762/eureka fetch-registry: false register-with-eureka: false ---spring: profiles: pee2server: port: 8762eureka: instance: name: pee2 client: server-url: defaultZone: http://pee1:8761/eureka fetch-registry: false register-with-eureka: false 4.修改host文件 1127.0.0.1 pee1 pee2 5.IDEA中启动主类 也可以在maven打包后的jar中运行命令启动 123java -jar xxx.jar --spring.profiles.active=pee1java -jar xxx.jar --spring.profiles.active=pee2java -jar xxx.jar --spring.profiles.active=pee3 6.启动成功后，在地址栏输入http://localhost:8761访问Eureka 客户端1.创建项目，添加maven依赖 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!-- 依赖管理 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- spring boot 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.boot.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring版本依赖管理--&gt; &lt;dependency&gt; &lt;groupId&gt;io.spring.platform&lt;/groupId&gt; &lt;artifactId&gt;platform-bom&lt;/artifactId&gt; &lt;version&gt;Brussels-SR7&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- spring cloud依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.boot.version&#125;&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; 2.创建主类，并添加@EnableEurekaClient注解 1234567891011@SpringBootApplication@EnableEurekaClientpublic class Application &#123; public static void main (String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125; 3.添加application.properties配置文件 123456789101112131415161718server.port=7901spring.application.name=server-provider## -------eureka配置----------##eureka.client.fetch-registry=trueeureka.client.register-with-eureka=true#####使用IP地址################eureka.instance.prefer-ip-address=trueeureka.instance.instanceId=$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;#续租时间eureka.instance.lease-renewal-interval-in-seconds=10#发呆时间eureka.instance.lease-expiration-duration-in-seconds=30#Eukre服务地址eureka.client.service-url.defaultZone=http://127.0.0.1:8761/eureka/ 4.启动运行客户端 5.查看Eureka注册中心页面","categories":[{"name":"微服务","slug":"微服务","permalink":"http://yoursite.com/categories/微服务/"}],"tags":[{"name":"eureka","slug":"eureka","permalink":"http://yoursite.com/tags/eureka/"}]},{"title":"","slug":"失眠可能是奋斗惹的祸","date":"2018-03-26T02:23:58.000Z","updated":"2018-03-26T03:56:19.000Z","comments":true,"path":"2018/03/26/失眠可能是奋斗惹的祸/","link":"","permalink":"http://yoursite.com/2018/03/26/失眠可能是奋斗惹的祸/","excerpt":"","text":"人应该趁早奋斗深夜2点，广州的夜晚安静的可怕，仿佛跟这座夜生活丰富的城市格格不入，窗外偶尔传来小孩的哭啼声，我却再一次无法入睡，对于来到广州4年的我已司空见惯，曾经无数个夜晚在床上辗转难眠，曾经有科学研究表明，失眠纯粹是人的心理状态，而失眠的主要特征在于不安的意识，每个人心里都有一团野火，看来今晚这把火然到我了 年轻的时候一定要奋斗吗像过去那么多失眠的夜晚一样，习惯性的打开手机，披上那件深蓝色的衬衣外套，手指随着屏幕不断滑动，突然一篇《要么奋斗，要么滚蛋》的文章映入眼前，全文讲述了作者的奋斗经历，唯有放下所有无用的行李，才有一点点胜出的可能。 曾经我就经历过一次公司裁员，当时还比较年轻，25岁正处于职业上升期，同时准备离开现工作的城市，去到另外一座城市，内心非常期待那高额的N+1,公司前后一共经历了三波裁员，每一次都没有我，心想这运气也是没谁了吧。 裁员总是有人欢喜有人愁，有次跟一位同事吃饭时，他边吃边说： 我有一些老同学在IBM工作，那时候能进IBM都是社会精英，进去了以后感觉这辈子都不愁了，工资高、福利好，稳定。工作也很轻松，效益好，做好自己分内的事就行了，老板也很宽松，不会像小公司那样苛刻。 可谁知道有一天IBM也就不行了呢？ 裁员来了，很多都是高级工程师或设计师，一把年纪了在自己工作岗位上奋斗了几十年的人，被裁的时候专业技能就只能做手头那点活儿了，出去了根本干不了外面的活儿。 年轻的时候到了一个地方，呆着不走，又不做别的事情，久而久之就被打磨成了一个机器上的零件，你只能在这个机器上运作，某一天这个机器不行了，你再想去别的机器就难了。 同事当时35岁，刚从华为国外外包回来，曾经也是某高校顶尖的精英，当裁员到他时，他再一次迷茫了。 你可以不【奋斗】，只要你能承受不奋斗带来的代价，或者有着不碰到风浪的运气 同时，让我想到了另一个人，Facebook的创始人扎克伯格，被人们冠以“第二盖茨”的美誉。如今拥有135亿美元的身价，是2008年最年轻的巨富，也是历来全球最年轻的自行创业亿万富豪 扎克伯格出生于纽约的一个犹太人家庭，中学时期就开始写程序，他的父亲在20世纪90年代曾教导他Atari BASIC Programming，之后聘请软件研发者David Newman当他的家教。Newman曾说扎克伯格是一个神童(prodigy)。 扎克伯格在高中时期，创作了名为Synapse Media Player的音乐程序，并且借由人工智能来学习用户听音乐的习惯，并且被贴到Slashdot上，被PC Magazine的五星评价为3颗星。微软与美国在线当时就想要招揽并训练扎克伯格，不过扎克伯格仍选择于2002年9月进入哈佛大学。 在哈佛时代，Vargas表示，扎克伯格被称誉为是“程序神人”（a programming prodigy）。他跟着犹太人Alpha Epsilon Pi学习心理学与运算科学。 2004年2月，还在哈佛大学主修计算机和心理学的二年级学生扎克伯格突发奇想，要建立一个网站作为哈佛大学学生交流的平台。只用了大概一个星期的时间，扎克伯格就建立起了这个名为Facebook的网站。意想不到的是，网站刚一开通就大为轰动，几个星期内，哈佛一半以上的大学部学生都登记加入会员，主动提供他们最私密的个人数据，如姓名、住址、兴趣爱好和照片等。学生们利用这个免费平台掌握朋友的最新动态、和朋友聊天、搜寻新朋友。 如今，它已成为世界上最重要的社交网站之一，就连前美国总统奥巴马、英国女王伊丽莎白二世等政界要人都成了Facebook 的用户。扎克伯格本人也因这一成功创业，成为世界上最年轻的亿万富翁，同时也是最积极从事慈善事业的美国富豪之一 总有些人，读书的时候他们全力投入，一骑其尘；搞事业的时候，他们不顾一切，一鸣惊人，他们显然会拥有更幸运的人生结局。 「奋斗」不代表你一定要去大城市，或者你一定要创业，又或者你一定要离开体制内。 对于我个人而言，「奋斗」的底线是磨好自己的剑，不要让它在稳定中生锈，导致在不稳定的时候无法使用。它的上线是让你剑变得光亮锋利，让你可以去你想去的地方，更好的劈开路上的荆棘。 最后如果你现在问我，我会非常肯定的告诉你：人在任何时候都应该奋斗，因为人的快乐来自于奋斗之后取得的成就 这种成就可大可小，比如你原来痛恨英语，经常不及格，后来发奋图强，最终获得CET-6级，这就是一种成就感，在比如你坚持锻炼身体一年，最终减肥20斤，这也是一种成就感。 比如你出生在一个中部省份一户贫穷的家庭，当你通过自己的努力考上大学，在北上广深谋得一份好工作，组建了自己的家庭，成为一名城市中产阶级，你可能会感叹，自己奋斗了大半辈子，和城市里那些“原住民”差不多，顶多也就是他们的一份子，但事实却是你的自豪感要远比那些原地踏步的“原住民”强得多，一个人通过努力获得的成就，一辈子都会跟着他，没有人可以夺走。 当内心开始坚定，既定很多人生目标时，我们就不会焦虑，往往失眠是因为工作压力、生活压力太大的一种表现，我们平时应当建立良好的生活习惯，适当做些放松的运动，解除心理紧张，及时排除压力， 洋洋洒洒写了这么多，可能很多人觉得这不过又是一篇鸡汤文而已，没关系，我相信当你心中的野火燃起来，尽快行动尝到甜头后，你就会明白。重要的话再说一遍，不劳而获对大多数人很有吸引力，但是真正的快乐和满足来自于奋斗后所取得的成就，生命不息，奋斗不止！","categories":[],"tags":[]},{"title":"","slug":"Tesla微服务治理平台演进","date":"2018-03-22T08:54:35.000Z","updated":"2018-08-29T11:24:44.000Z","comments":true,"path":"2018/03/22/Tesla微服务治理平台演进/","link":"","permalink":"http://yoursite.com/2018/03/22/Tesla微服务治理平台演进/","excerpt":"","text":"快速入门Tesla是什么 Tesla是向日葵平台架构组基于SpringCloud技术开发的微服务治理平台，Tesla并不是一个框架，而是一套完整的微服务治理解决方案，主要包括： 服务注册与发现 负载均衡 断路器 智能路由网关 服务状态监控 服务鉴权 分布式日志追踪 模块目录结构12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152xrk-tesla ├─ tesla-admin (微服务治理管理后台) ├─ tesla-auth (授权服务中心) ├─ tesla-common (系统公共模块) ├─ tesla-gate (智能路由网关) ├─ tesla-module (微服务模块) │ ├─ server-provider (服务提供者示例) │ ├─ server-consumer (服务消费者示例) │ └─ xxx ├─ tesla-monitor (监控中心） │ ├─ tesla-admin-server (服务状态监控） ├─ tesla-registry (服务注册与发现中心) │ ├─ tesla-eureka-server (Eureka服务发现) │ ├─ tesla-consul-server (Consul服务发现) ``` ### 访问地址|服务名|描述|测试环境访问地址|线上环境访问地址||:----|:---|:-----|-----|---||tesla-eureka-server|服务注册中心|[192.168.6.200:8761](http://192.168.6.200:8761)||tesla-admin-server|服务状态监控|[192.168.6.200:9000](http://192.168.6.200:9000)| ### 为什么选择SpringCloud* SpringCloud来源于Spring，质量、稳定性、持续性都可以得到保证* SpringCloud天然支持SpringBoot，方便业务快速落地* SpringCloud是Java领域最适合做微服务的框架&gt; SpringCloud是微服务架构的最佳落地方案### 如何使用SpringCloud#### Spring Boot 与Spring Cloud版本对应关系|Spring Boot|Spring Cloud||:-----|:------||1.2.x|Angel版本||1.3.x|Brixton版本||1.4.x|Camden版本||1.5.x|Dalston版本、Edgware版本||2.0.x|Finchley版本|!&gt;1. 版本不对应可能造成maven编译项目时报错。 2. Spring Cloud 版本采用命名的方式，使用伦敦地铁站名。其中SRx为该版本的一个Service Release版本，x为一个递增的数字。例如：Dalston SR4。 #### 集成SpringCloud在项目中添加SpringCloud的Maven依赖 &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- spring boot 依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;${spring.boot.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- spring版本依赖管理--&gt; &lt;dependency&gt; &lt;groupId&gt;io.spring.platform&lt;/groupId&gt; &lt;artifactId&gt;platform-bom&lt;/artifactId&gt; &lt;version&gt;Brussels-SR7&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- spring cloud依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring.cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576?&gt;1. 版本不对应可能造成maven编译项目时报错。 2. Spring Cloud 版本采用命名的方式，使用伦敦地铁站名。其中SRx为该版本的一个Service Release版本，x为一个递增的数字。例如：Dalston SR4。## 微服务治理### 什么是微服务微服务是将一个大型的单体应用架构拆分为多个**细粒度**服务的架构### 传统架构演进发展史#### 单体架构#### 垂直架构#### 服务化架构### SOA和微服务架构区别其实服务化架构已经可以解决大部分企业的需求了，那么我们为什么要研究微服务呢？先说说他们的区别：* 微服务强调业务系统需要彻底的组件化和服务化，一个组件就是一个产品，可以独立对外提供服务* 微服务不再强调传统SOA架构里面比较重的ESB企业服务总线* 微服务强调每个微服务都有自己的独立运行空间，包括数据库资源* 微服务更多诞生在互联网时代演进而来，* 微服务的切分粒度会更小&gt; 总的来说，微服务架构是SOA架构思想的一种扩展，更加强调服务个体的独立性、拆分粒度更小。 ### 微服务拆分原则## 注册中心### Eureka 简介Eureka是Netfilx开源的一款提供服务发现和注册的产品，它提供了完整的Service Registry和Service Discovery实现，也是SpringCloud体系中最重要的核心组件之一。![](https://ws4.sinaimg.cn/large/006tNc79gy1fpjggnzmshj31cy0nwgqx.jpg)上图可以看出主要由三个角色组成* Eureka Server: 提供服务注册与发现。* Service Provider:服务提供者,将自身服务注册到Eureka，从而使消费方能够找到。* Service Consumer: 服务消费者,从Eureka获取服务列表，进行消费服务。### 工作原理Eureka包含两个组件：Eureka Server和Eureka Clinet，它们的作用如下：* Eureka Client是一个Java客户端，用于简化与Eureka Server的交互。* Eureka Server提供了服务发现的能力，各个微服务节点启动时，会通过Eureka Client向Eureka Server注册自己的信息，Eureka Server会存储所有可用的服务节点的信息。* 微服务启动后，会在一定的周期内向Eureka Server发送心跳(**默认为30秒**)以续约自己的信息，如果Eureka Server在一定的时间内没有收到心跳(**默认为90秒**),则会从服务注册列表中剔除该服务的节点信息* Eureka Server也是一个Eureka Client，多个Eureka Server之间通过复制的方式进行服务注册信息的同步* Eureka Client会缓存Eureka Server中的信息(默认为30秒)，即使所有的Eureka Server节点宕机后，服务消费者依然可以从缓存信息中找到服务提供者。综上所述，Eureka通过心跳检测、健康检查、客户端缓存等机制，提高了系统灵活性、可伸缩性、可用性。### 服务提供者项目pom.xml中添加依赖```java&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 添加@EnableEurekaClient注解 123@EnableEurekaClientpublic Class Application&#123;&#125; 在application.yml或application.properties中添加配置项 1234567891011#注册到eureka中心，获取到配置服务eureka.client.service-url.defaultZone=http://localhost:7000/eureka/# 心跳时间，即服务续约间隔时间（缺省为30s）eureka.instance.lease-renewal-interval-in-seconds=5# 发呆时间，即服务续约到期时间（缺省为90s）eureka.instance.lease-expiration-duration-in-seconds=10# 开启健康检查(依赖spring-boot-starter-actuator)eureka.client.healthcheck.enabled=true 自我保护机制上图为Eureka自我保护模式界面 默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳信息，将会注销此节点信息(默认90秒)，但是当网络分区发生故障时，微服务与Eureka Server之间无法正常通信，因为微服务是健康的，此时就不应该注销这个微服务。 自我保护机制的工作原理是当15分钟内超过85%的客户端节点服务不可用，那么Eurekajiu认为客户端与注册中心出现了网络故障，此时将进入Eureka Server的自我保护机制，出现以下情况： Eureka不再从服务注册列表中移除因为长时间未收到心跳而应该过期的服务 Eureka仍然可以接受新服务的注册和查询请求，但是不会同步到其他节点上(即保证当前节点依然可用) 当网络稳定时，会退出自我保护模式，当前实例新注册的信息会同步到其他节点中 自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。 12禁用自我保护模式（默认打开状态，建议生产环境打开此配置）eureka.server.enable-self-preservation = false 服务状态监控Spring Boot Admin","categories":[],"tags":[]},{"title":"SpringCloud（二）注册中心","slug":"SpringCloud（二）注册中心","date":"2018-03-22T08:51:54.000Z","updated":"2018-03-22T08:53:17.000Z","comments":true,"path":"2018/03/22/SpringCloud（二）注册中心/","link":"","permalink":"http://yoursite.com/2018/03/22/SpringCloud（二）注册中心/","excerpt":"","text":"为什么需要服务发现微服务架构火了之后，","categories":[],"tags":[]},{"title":"Consul学习（一）环境搭建安装","slug":"Consul学习（一）环境搭建","date":"2018-03-22T08:40:55.000Z","updated":"2018-03-22T08:45:20.000Z","comments":true,"path":"2018/03/22/Consul学习（一）环境搭建/","link":"","permalink":"http://yoursite.com/2018/03/22/Consul学习（一）环境搭建/","excerpt":"","text":"简介Consul是韩国Harkip公司开源的一款服务发现和注册的工具，基于go语言开发实现，提供服务发现、健康检查、K/V存储、多数据中心 下载去官网获取地址 启动","categories":[],"tags":[]},{"title":"SpringCloud（一）聊聊SpringCloud","slug":"SpringCloud（一）聊聊SpringCloud","date":"2018-03-22T05:15:24.000Z","updated":"2018-04-03T08:08:27.000Z","comments":true,"path":"2018/03/22/SpringCloud（一）聊聊SpringCloud/","link":"","permalink":"http://yoursite.com/2018/03/22/SpringCloud（一）聊聊SpringCloud/","excerpt":"","text":"SpringCloud是什么Spring Cloud是一个依赖于SpringBoot快速构建分布式系统的通用模型的云应用开发工具（如服务发现注册、配置中心、消息中心、负载均衡、断路器、智能路由、微代理、控制总线）等，是一系列框架的集合 Spring Cloud本身并未有重复造轮子，而是将目前各公司开发比较成熟、经得起考验的服务框架组合起来，通过Spring Boot的风格进行再封装屏蔽掉复杂的配置和实现原理，帮助开发者提供一套简单易懂、易部署、易维护的分布式系统开发工具包 核心组件 组件 描述 Eureka SpringCloud的优势","categories":[{"name":"spring cloud","slug":"spring-cloud","permalink":"http://yoursite.com/categories/spring-cloud/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"http://yoursite.com/tags/微服务/"}]},{"title":"麦肯锡思维读书总结","slug":"麦肯锡思维读书总结","date":"2018-03-07T02:15:24.000Z","updated":"2018-03-08T02:43:22.000Z","comments":true,"path":"2018/03/07/麦肯锡思维读书总结/","link":"","permalink":"http://yoursite.com/2018/03/07/麦肯锡思维读书总结/","excerpt":"","text":"最近抽时间读了这本书麦肯锡思维，本书整体的内容虽然亮点不多，虽然像是从其他一些成功学或麦肯锡工作方法拼凑而来的，但是有一些方法和思维也值得我们学习和借鉴,同时这也是我写的第一篇读书笔记，希望自己能继续提高。 麦肯锡公司作为全球最成功的战略咨询公司之一,通过“麦肯锡人”长期为客户解决商业问题的过程中，学习他们独特的思考方法，运用到自己的工作、学习、生活中，更高效的达到自己的目标。 关于工作正确的做事和做正确的事大家经常在工作中会遇到“正确的做事”和“做正确的事”，两者看似相近，实则有本质的区别，要做好一件事，必须是以“正确”为前提，也就是所做的事正确，如果方向偏离，后面则会离目标越来越远。 我们说，行动前周密的计划就是做正确的事、这是一种思想和意识，麦肯锡的原则就是既要正确的做事，更要做正确的事，而大前提就是发现“正确的问题”，这是做正确的事的起点。 工作效率二八法则我们经常会发现工作中，重要的事情占少数，不重要的事情占多数，因此当我们开始一项工作或做某件事前，我们要精心安排好事情的主次，放在首位的应该是最重要的事情。 我们每天面对的食物纷繁杂陈，对这些事物进行分类，大致可以分为四个象限，通过这样的归类，复杂的事情就会变得清晰起来： 重要且紧急的事情 重要但不紧急的事情 紧急单不重要的事情 既不紧急也不重要的事情 关键驱动点当我们解决问题时，需要找到某项工作或事情中的关键驱动点，关键驱动点也就是在事情中起到关键的，决定性作用的因素，当我们找到了关键驱动点，也就找到了问题的核心，从关键驱动点入手，才能有效的解决问题。 关于思维MECE分析法麦肯锡人认为，在解决一个问题时，如果能够全面考虑这个问题的各种情况，真正做到“完全穷尽”，那么必定能够完整清晰的呈现出这个问题的各个方法，从而彻底、有效的解决各个问题 MECC读作“me-see”,意思是“相互独立，完全穷尽”，那么这个抽象的句子到底是什么意思呢，当我们解决一个问题时，我们应当从最高层次开始，将你必须解决问题的各个部分全部罗列出来，当你已经确定了这些内容后，此时我们需要思考其中的每一项是否都是相互独立的。然后，你要继续思考，问题的每一方面是否都来自你列出的每个项目，而且是其中的唯一的一项，也就是说，你是否把所有的项目都列全了？如果答案是肯定的，那么这些项目就是“完全穷尽的”。 逻辑树分析法在麦肯锡人看来，逻辑思维与理论体系同等重要，逻辑树又被称为问题树、演绎树或分类树，主要表现在分层罗列问题的所有子问题，从最高一层开始，逐层向下扩展分析，将已知的问题作为逻辑树的树干，然后思考哪些问题与这个已知问题相关，将这些问题或子任务成功逻辑树的树枝，也就是我们经常说理解的”金字塔原理“,通过”逻辑树分析法”能够帮助你理清思路，避免重复性的工作或无关的思考。 头脑风暴麦肯锡人在解决问题经常会组织头脑风暴会议，头脑风暴旨在以明确的方式组织专家或成员进行讨论，大家“自由‘地提出更多解决方案，当然在实施头脑风暴过程中还需要注意以下几点： 协调好上下级的关系 缓解环境造成的压力 如何认识批评和职责 要有确定的主题 对方案做好分析 关于习惯一个的习惯养成大约需要21天，只有你坚持21天，那么恭喜你，你一大功告成。接下来你就能持久的坚持下去了。 每天通过一张图表来管理你的工作，当我们做好一张简单的表格，就会让你在多变繁杂的工作生活中轻松应对。 经常在工作中总结和记录工作日志，每天下班前，总结今天工作的得与失，汲取一些经验和教训，对改进工作，提高生活质量都是有益处的，我们提倡动手干，也要提倡动脑筋。同时，记工作日志也是一个很好的习惯。 最后我们的工作离不开团队的支持，当我们面临复杂的工作，仅仅依靠个人很难取得很好的效果，而依靠团队的力量，集合各方面专家能手的聪明才智，很多问题解决起来就轻松多了 有时候，我们也要从别人成功的经验中学的很多方法，从别人失败的教训中总结少走弯路。在初入职场或工作生活中，好的向导能让我们不再那么迷茫，能引导我们持续进步提高，更快地达成目标。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/categories/读书笔记/"}],"tags":[]},{"title":"Mac环境安装Consul","slug":"Mac环境安装Consul","date":"2018-02-28T05:15:24.000Z","updated":"2018-03-21T03:51:02.000Z","comments":true,"path":"2018/02/28/Mac环境安装Consul/","link":"","permalink":"http://yoursite.com/2018/02/28/Mac环境安装Consul/","excerpt":"","text":"简介Consul是HashiCorp公司推出的开源工具，用于实现分布式xit的服务发现与配置，与其他分布式服务发现方案相比，Consul内置了服务注册与发现框架、分布式一致性协议实现、健康检查、Key/Value Store存储，多数据中心方案、不再续约依赖于其他工具（比如Zookeeper），使用起来也较为简单，Consul使用Go语言编写，支持(Linux/Ubuntu/MacOS/Windows);安装包仅包含一个文件，方便与Docker无缝集成。 安装MacOS下安装通过homebrew包管理器安装 1homebrew install consul 启动以开发模式启动Consul 1consul agent -dev # 表示以开发模式运行启动，还有server服务模式运行 打开浏览器，输入链接：http://localhost:8500/ui/#/dc1/services访问首页 停止服务常用命令集群高可用","categories":[{"name":"技术杂谈","slug":"技术杂谈","permalink":"http://yoursite.com/categories/技术杂谈/"}],"tags":[{"name":"consul","slug":"consul","permalink":"http://yoursite.com/tags/consul/"}]},{"title":"Hexo博客搭建之路","slug":"我的博客开通了","date":"2018-02-24T08:09:57.000Z","updated":"2018-02-28T09:43:55.000Z","comments":true,"path":"2018/02/24/我的博客开通了/","link":"","permalink":"http://yoursite.com/2018/02/24/我的博客开通了/","excerpt":"","text":"一直以来就想搭建一个博客，但由于种种原因，最终都不了了之，最近恰好有空，于是参照一些教程，搭建了自己的博客。 为什么要搭建博客，可能是为了装逼吧，同时也希望将平时工作和生活的相关事情进行总结和积累。 经过技术调研与对比，博客最终选择为hexo+Github Pages，为什么没有选择其他呢？可能还是觉得太麻烦，也许还是是因为hexo相对来说比较简单吧 本篇博客将完整介绍Hexo博客的搭建过程，也希望帮助大家少踩点坑，废话少说，开始吧。 环境准备安装Node.jsHexo是基于node.js的，所以要去官网下载最新稳定版即可，具体安装参考官网步骤即可。 同样也可以通过Mac包管理器Homebrew来安装,打开终端输入下面命令 1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 继续安装另一个Homebrew Cash包管理器，此包管理器它会自动配置好环境变量，使用我们之前安装的包命令 1brew install caskroom/cask/brew-cask 使用Homebrew安装Node.js 1brew install node 安装Git1brew install git 检查是否安装成功123node -vnpm -vgit -v 如果能正确显示版本号，则表示环境安装准备成功 安装Hexo执行以下命令，开始安装Hexo 1npm install -g hexo 创建一个空的目录，用来放置hexo博客文件，进入到目录，输入命令开始初始化 1hexo init jerry_blog 初始化完成后，系统将提示执行npm install完成依赖及所有的配置 1npm install 测试HexoHexo安装配置完成后，打开终端，输入以下命令启动本地服务进行测试 1hexo server 打开浏览器，输入http://localhost:4000,出现hexo欢迎页面则启动成功 安装主题hexo的博客主题非常多，本博客最终选择的是hexo-theme-icarus主题 下载hexo-theme-icarus主题配置icarus主题包可以在这里找到，也可以使用git下载，切换到hexo博客根目录，然后输入： 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 下载完成之后将根目录的主题设置为icarus 12#将以前的主题修改为icarustheme: icarus 主题设置logo配置 hexo常用命令12345hexo g 生成静态页面至public目录hexo s 开启本地预览服务端口(htttp://localhost:4000)hexo d 将.deploy目录部署至服务器hexo new &quot;postname&quot; 新建文章hexo new page &quot;pagename&quot; 新建页面 发布博客到Github服务器安装hexo-deployer-git工具，输入命令 1npm install hexo-deployer-git --save 配置git账户和密码，打开hexo博客目录的_config.yml文件 1234deploy: type: git repo: 输入GitHub Pages的仓库地址 branch: 分支名称 后续","categories":[{"name":"技术杂谈","slug":"技术杂谈","permalink":"http://yoursite.com/categories/技术杂谈/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}